// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#include "protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_protocol_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EndTurn;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Position;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GameState_UnitsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Move;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Spawn;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Tile;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Unit;
}  // namespace protobuf_protocol_2eproto
class GameState_UnitsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameState_UnitsEntry_DoNotUse>
      _instance;
} _GameState_UnitsEntry_DoNotUse_default_instance_;
class GameStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameState>
      _instance;
} _GameState_default_instance_;
class PositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Position>
      _instance;
} _Position_default_instance_;
class TileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Tile>
      _instance;
} _Tile_default_instance_;
class UnitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Unit>
      _instance;
} _Unit_default_instance_;
class CommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Command>
      _instance;
  const ::EndTurn* end_turn_;
  const ::Move* move_;
  const ::Spawn* spawn_;
} _Command_default_instance_;
class EndTurnDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EndTurn>
      _instance;
} _EndTurn_default_instance_;
class MoveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Move>
      _instance;
} _Move_default_instance_;
class SpawnDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Spawn>
      _instance;
} _Spawn_default_instance_;
namespace protobuf_protocol_2eproto {
static void InitDefaultsGameState_UnitsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameState_UnitsEntry_DoNotUse_default_instance_;
    new (ptr) ::GameState_UnitsEntry_DoNotUse();
  }
  ::GameState_UnitsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GameState_UnitsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGameState_UnitsEntry_DoNotUse}, {
      &protobuf_protocol_2eproto::scc_info_Unit.base,}};

static void InitDefaultsGameState() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GameState_default_instance_;
    new (ptr) ::GameState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GameState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GameState =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGameState}, {
      &protobuf_protocol_2eproto::scc_info_GameState_UnitsEntry_DoNotUse.base,
      &protobuf_protocol_2eproto::scc_info_Tile.base,}};

static void InitDefaultsPosition() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Position_default_instance_;
    new (ptr) ::Position();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Position::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Position =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPosition}, {}};

static void InitDefaultsTile() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Tile_default_instance_;
    new (ptr) ::Tile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Tile::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Tile =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTile}, {
      &protobuf_protocol_2eproto::scc_info_Position.base,}};

static void InitDefaultsUnit() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Unit_default_instance_;
    new (ptr) ::Unit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Unit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Unit =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsUnit}, {
      &protobuf_protocol_2eproto::scc_info_Position.base,}};

static void InitDefaultsCommand() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Command_default_instance_;
    new (ptr) ::Command();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Command::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Command =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsCommand}, {
      &protobuf_protocol_2eproto::scc_info_EndTurn.base,
      &protobuf_protocol_2eproto::scc_info_Move.base,
      &protobuf_protocol_2eproto::scc_info_Spawn.base,}};

static void InitDefaultsEndTurn() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EndTurn_default_instance_;
    new (ptr) ::EndTurn();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EndTurn::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EndTurn =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEndTurn}, {}};

static void InitDefaultsMove() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Move_default_instance_;
    new (ptr) ::Move();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Move::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Move =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMove}, {
      &protobuf_protocol_2eproto::scc_info_Position.base,}};

static void InitDefaultsSpawn() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Spawn_default_instance_;
    new (ptr) ::Spawn();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Spawn::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Spawn =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSpawn}, {
      &protobuf_protocol_2eproto::scc_info_Position.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_GameState_UnitsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GameState.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Position.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Tile.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Unit.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Command.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EndTurn.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Move.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Spawn.base);
}

::google::protobuf::Metadata file_level_metadata[9];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameState_UnitsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameState_UnitsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameState_UnitsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameState_UnitsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameState, active_player_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameState, player_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameState, units_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GameState, tiles_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Position, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Position, y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Tile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Tile, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Tile, occupied_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Tile, terrain_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Unit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Unit, player_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Unit, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Unit, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Unit, health_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Unit, action_points_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Command, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Command, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::CommandDefaultTypeInternal, end_turn_),
  offsetof(::CommandDefaultTypeInternal, move_),
  offsetof(::CommandDefaultTypeInternal, spawn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Command, command_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EndTurn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Move, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Move, unit_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Move, position_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Spawn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Spawn, unit_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Spawn, unit_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Spawn, position_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::GameState_UnitsEntry_DoNotUse)},
  { 9, -1, sizeof(::GameState)},
  { 18, -1, sizeof(::Position)},
  { 25, -1, sizeof(::Tile)},
  { 33, -1, sizeof(::Unit)},
  { 43, -1, sizeof(::Command)},
  { 52, -1, sizeof(::EndTurn)},
  { 57, -1, sizeof(::Move)},
  { 64, -1, sizeof(::Spawn)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GameState_UnitsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GameState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Position_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Tile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Unit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Command_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_EndTurn_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Move_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Spawn_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "protocol.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016protocol.proto\"\243\001\n\tGameState\022\025\n\ractive"
      "_player\030\001 \001(\r\022\016\n\006player\030\002 \001(\r\022$\n\005units\030\003"
      " \003(\0132\025.GameState.UnitsEntry\022\024\n\005tiles\030\004 \003"
      "(\0132\005.Tile\0323\n\nUnitsEntry\022\013\n\003key\030\001 \001(\004\022\024\n\005"
      "value\030\002 \001(\0132\005.Unit:\0028\001\" \n\010Position\022\t\n\001x\030"
      "\001 \001(\r\022\t\n\001y\030\002 \001(\r\"A\n\004Tile\022\026\n\003pos\030\001 \001(\0132\t."
      "Position\022\020\n\010occupied\030\003 \001(\010\022\017\n\007terrain\030\002 "
      "\001(\r\"h\n\004Unit\022\016\n\006player\030\001 \001(\r\022\014\n\004type\030\002 \001("
      "\r\022\033\n\010position\030\003 \001(\0132\t.Position\022\016\n\006health"
      "\030\004 \001(\005\022\025\n\raction_points\030\005 \001(\005\"b\n\007Command"
      "\022\034\n\010end_turn\030\001 \001(\0132\010.EndTurnH\000\022\025\n\004move\030\002"
      " \001(\0132\005.MoveH\000\022\027\n\005spawn\030\003 \001(\0132\006.SpawnH\000B\t"
      "\n\007command\"\t\n\007EndTurn\"4\n\004Move\022\017\n\007unit_id\030"
      "\001 \001(\004\022\033\n\010position\030\002 \001(\0132\t.Position\"H\n\005Sp"
      "awn\022\017\n\007unit_id\030\001 \001(\004\022\021\n\tunit_type\030\002 \001(\r\022"
      "\033\n\010position\030\003 \001(\0132\t.Positionb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 636);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocol.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_protocol_2eproto

// ===================================================================

GameState_UnitsEntry_DoNotUse::GameState_UnitsEntry_DoNotUse() {}
GameState_UnitsEntry_DoNotUse::GameState_UnitsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void GameState_UnitsEntry_DoNotUse::MergeFrom(const GameState_UnitsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata GameState_UnitsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[0];
}
void GameState_UnitsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void GameState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameState::kActivePlayerFieldNumber;
const int GameState::kPlayerFieldNumber;
const int GameState::kUnitsFieldNumber;
const int GameState::kTilesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameState::GameState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2eproto::scc_info_GameState.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GameState)
}
GameState::GameState(const GameState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tiles_(from.tiles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  units_.MergeFrom(from.units_);
  ::memcpy(&active_player_, &from.active_player_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_) -
    reinterpret_cast<char*>(&active_player_)) + sizeof(player_));
  // @@protoc_insertion_point(copy_constructor:GameState)
}

void GameState::SharedCtor() {
  ::memset(&active_player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_) -
      reinterpret_cast<char*>(&active_player_)) + sizeof(player_));
}

GameState::~GameState() {
  // @@protoc_insertion_point(destructor:GameState)
  SharedDtor();
}

void GameState::SharedDtor() {
}

void GameState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GameState::descriptor() {
  ::protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameState& GameState::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2eproto::scc_info_GameState.base);
  return *internal_default_instance();
}


void GameState::Clear() {
// @@protoc_insertion_point(message_clear_start:GameState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  units_.Clear();
  tiles_.Clear();
  ::memset(&active_player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_) -
      reinterpret_cast<char*>(&active_player_)) + sizeof(player_));
  _internal_metadata_.Clear();
}

bool GameState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GameState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 active_player = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_player_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 player = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint64, .Unit> units = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          GameState_UnitsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              GameState_UnitsEntry_DoNotUse,
              ::google::protobuf::uint64, ::Unit,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint64, ::Unit > > parser(&units_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Tile tiles = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tiles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GameState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GameState)
  return false;
#undef DO_
}

void GameState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GameState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 active_player = 1;
  if (this->active_player() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->active_player(), output);
  }

  // uint32 player = 2;
  if (this->player() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->player(), output);
  }

  // map<uint64, .Unit> units = 3;
  if (!this->units().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::Unit >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->units().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->units().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::Unit >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::Unit >::const_iterator
          it = this->units().begin();
          it != this->units().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<GameState_UnitsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(units_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    } else {
      ::std::unique_ptr<GameState_UnitsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::Unit >::const_iterator
          it = this->units().begin();
          it != this->units().end(); ++it) {
        entry.reset(units_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    }
  }

  // repeated .Tile tiles = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tiles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->tiles(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GameState)
}

::google::protobuf::uint8* GameState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GameState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 active_player = 1;
  if (this->active_player() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->active_player(), target);
  }

  // uint32 player = 2;
  if (this->player() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->player(), target);
  }

  // map<uint64, .Unit> units = 3;
  if (!this->units().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::Unit >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint64, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->units().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->units().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint64, ::Unit >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::Unit >::const_iterator
          it = this->units().begin();
          it != this->units().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<GameState_UnitsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(units_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    } else {
      ::std::unique_ptr<GameState_UnitsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint64, ::Unit >::const_iterator
          it = this->units().begin();
          it != this->units().end(); ++it) {
        entry.reset(units_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    }
  }

  // repeated .Tile tiles = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tiles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->tiles(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GameState)
  return target;
}

size_t GameState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GameState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint64, .Unit> units = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->units_size());
  {
    ::std::unique_ptr<GameState_UnitsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint64, ::Unit >::const_iterator
        it = this->units().begin();
        it != this->units().end(); ++it) {
      entry.reset(units_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .Tile tiles = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->tiles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tiles(static_cast<int>(i)));
    }
  }

  // uint32 active_player = 1;
  if (this->active_player() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->active_player());
  }

  // uint32 player = 2;
  if (this->player() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GameState)
  GOOGLE_DCHECK_NE(&from, this);
  const GameState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GameState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GameState)
    MergeFrom(*source);
  }
}

void GameState::MergeFrom(const GameState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GameState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  units_.MergeFrom(from.units_);
  tiles_.MergeFrom(from.tiles_);
  if (from.active_player() != 0) {
    set_active_player(from.active_player());
  }
  if (from.player() != 0) {
    set_player(from.player());
  }
}

void GameState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameState::CopyFrom(const GameState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameState::IsInitialized() const {
  return true;
}

void GameState::Swap(GameState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameState::InternalSwap(GameState* other) {
  using std::swap;
  units_.Swap(&other->units_);
  CastToBase(&tiles_)->InternalSwap(CastToBase(&other->tiles_));
  swap(active_player_, other->active_player_);
  swap(player_, other->player_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GameState::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Position::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Position::kXFieldNumber;
const int Position::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Position::Position()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2eproto::scc_info_Position.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Position)
}
Position::Position(const Position& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:Position)
}

void Position::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:Position)
  SharedDtor();
}

void Position::SharedDtor() {
}

void Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Position::descriptor() {
  ::protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Position& Position::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2eproto::scc_info_Position.base);
  return *internal_default_instance();
}


void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

bool Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Position)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Position)
  return false;
#undef DO_
}

void Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  // uint32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->y(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Position)
}

::google::protobuf::uint8* Position::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x(), target);
  }

  // uint32 y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->y(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Position)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->x());
  }

  // uint32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Position::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Position)
  GOOGLE_DCHECK_NE(&from, this);
  const Position* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Position>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Position)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Position)
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void Position::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::Swap(Position* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Position::InternalSwap(Position* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Position::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Tile::InitAsDefaultInstance() {
  ::_Tile_default_instance_._instance.get_mutable()->pos_ = const_cast< ::Position*>(
      ::Position::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Tile::kPosFieldNumber;
const int Tile::kOccupiedFieldNumber;
const int Tile::kTerrainFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Tile::Tile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2eproto::scc_info_Tile.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Tile)
}
Tile::Tile(const Tile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos()) {
    pos_ = new ::Position(*from.pos_);
  } else {
    pos_ = NULL;
  }
  ::memcpy(&terrain_, &from.terrain_,
    static_cast<size_t>(reinterpret_cast<char*>(&occupied_) -
    reinterpret_cast<char*>(&terrain_)) + sizeof(occupied_));
  // @@protoc_insertion_point(copy_constructor:Tile)
}

void Tile::SharedCtor() {
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&occupied_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(occupied_));
}

Tile::~Tile() {
  // @@protoc_insertion_point(destructor:Tile)
  SharedDtor();
}

void Tile::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
}

void Tile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Tile::descriptor() {
  ::protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Tile& Tile::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2eproto::scc_info_Tile.base);
  return *internal_default_instance();
}


void Tile::Clear() {
// @@protoc_insertion_point(message_clear_start:Tile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && pos_ != NULL) {
    delete pos_;
  }
  pos_ = NULL;
  ::memset(&terrain_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&occupied_) -
      reinterpret_cast<char*>(&terrain_)) + sizeof(occupied_));
  _internal_metadata_.Clear();
}

bool Tile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Tile)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Position pos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 terrain = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terrain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool occupied = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &occupied_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Tile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Tile)
  return false;
#undef DO_
}

void Tile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Tile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Position pos = 1;
  if (this->has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_pos(), output);
  }

  // uint32 terrain = 2;
  if (this->terrain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->terrain(), output);
  }

  // bool occupied = 3;
  if (this->occupied() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->occupied(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Tile)
}

::google::protobuf::uint8* Tile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Tile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Position pos = 1;
  if (this->has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_pos(), deterministic, target);
  }

  // uint32 terrain = 2;
  if (this->terrain() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->terrain(), target);
  }

  // bool occupied = 3;
  if (this->occupied() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->occupied(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Tile)
  return target;
}

size_t Tile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Tile)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Position pos = 1;
  if (this->has_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // uint32 terrain = 2;
  if (this->terrain() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->terrain());
  }

  // bool occupied = 3;
  if (this->occupied() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Tile)
  GOOGLE_DCHECK_NE(&from, this);
  const Tile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Tile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Tile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Tile)
    MergeFrom(*source);
  }
}

void Tile::MergeFrom(const Tile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Tile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pos()) {
    mutable_pos()->::Position::MergeFrom(from.pos());
  }
  if (from.terrain() != 0) {
    set_terrain(from.terrain());
  }
  if (from.occupied() != 0) {
    set_occupied(from.occupied());
  }
}

void Tile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Tile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tile::CopyFrom(const Tile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Tile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tile::IsInitialized() const {
  return true;
}

void Tile::Swap(Tile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Tile::InternalSwap(Tile* other) {
  using std::swap;
  swap(pos_, other->pos_);
  swap(terrain_, other->terrain_);
  swap(occupied_, other->occupied_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Tile::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Unit::InitAsDefaultInstance() {
  ::_Unit_default_instance_._instance.get_mutable()->position_ = const_cast< ::Position*>(
      ::Position::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Unit::kPlayerFieldNumber;
const int Unit::kTypeFieldNumber;
const int Unit::kPositionFieldNumber;
const int Unit::kHealthFieldNumber;
const int Unit::kActionPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Unit::Unit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2eproto::scc_info_Unit.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Unit)
}
Unit::Unit(const Unit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::Position(*from.position_);
  } else {
    position_ = NULL;
  }
  ::memcpy(&player_, &from.player_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_points_) -
    reinterpret_cast<char*>(&player_)) + sizeof(action_points_));
  // @@protoc_insertion_point(copy_constructor:Unit)
}

void Unit::SharedCtor() {
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_points_) -
      reinterpret_cast<char*>(&position_)) + sizeof(action_points_));
}

Unit::~Unit() {
  // @@protoc_insertion_point(destructor:Unit)
  SharedDtor();
}

void Unit::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void Unit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Unit::descriptor() {
  ::protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Unit& Unit::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2eproto::scc_info_Unit.base);
  return *internal_default_instance();
}


void Unit::Clear() {
// @@protoc_insertion_point(message_clear_start:Unit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_points_) -
      reinterpret_cast<char*>(&player_)) + sizeof(action_points_));
  _internal_metadata_.Clear();
}

bool Unit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Unit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 player = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Position position = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 health = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &health_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 action_points = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Unit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Unit)
  return false;
#undef DO_
}

void Unit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Unit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player = 1;
  if (this->player() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player(), output);
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // .Position position = 3;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_position(), output);
  }

  // int32 health = 4;
  if (this->health() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->health(), output);
  }

  // int32 action_points = 5;
  if (this->action_points() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->action_points(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Unit)
}

::google::protobuf::uint8* Unit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Unit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player = 1;
  if (this->player() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player(), target);
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // .Position position = 3;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_position(), deterministic, target);
  }

  // int32 health = 4;
  if (this->health() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->health(), target);
  }

  // int32 action_points = 5;
  if (this->action_points() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->action_points(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Unit)
  return target;
}

size_t Unit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Unit)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Position position = 3;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // uint32 player = 1;
  if (this->player() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player());
  }

  // uint32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  // int32 health = 4;
  if (this->health() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->health());
  }

  // int32 action_points = 5;
  if (this->action_points() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->action_points());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Unit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Unit)
  GOOGLE_DCHECK_NE(&from, this);
  const Unit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Unit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Unit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Unit)
    MergeFrom(*source);
  }
}

void Unit::MergeFrom(const Unit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Unit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    mutable_position()->::Position::MergeFrom(from.position());
  }
  if (from.player() != 0) {
    set_player(from.player());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.health() != 0) {
    set_health(from.health());
  }
  if (from.action_points() != 0) {
    set_action_points(from.action_points());
  }
}

void Unit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Unit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Unit::CopyFrom(const Unit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Unit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Unit::IsInitialized() const {
  return true;
}

void Unit::Swap(Unit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Unit::InternalSwap(Unit* other) {
  using std::swap;
  swap(position_, other->position_);
  swap(player_, other->player_);
  swap(type_, other->type_);
  swap(health_, other->health_);
  swap(action_points_, other->action_points_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Unit::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Command::InitAsDefaultInstance() {
  ::_Command_default_instance_.end_turn_ = const_cast< ::EndTurn*>(
      ::EndTurn::internal_default_instance());
  ::_Command_default_instance_.move_ = const_cast< ::Move*>(
      ::Move::internal_default_instance());
  ::_Command_default_instance_.spawn_ = const_cast< ::Spawn*>(
      ::Spawn::internal_default_instance());
}
void Command::set_allocated_end_turn(::EndTurn* end_turn) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_command();
  if (end_turn) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      end_turn = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, end_turn, submessage_arena);
    }
    set_has_end_turn();
    command_.end_turn_ = end_turn;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.end_turn)
}
void Command::set_allocated_move(::Move* move) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_command();
  if (move) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      move = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, move, submessage_arena);
    }
    set_has_move();
    command_.move_ = move;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.move)
}
void Command::set_allocated_spawn(::Spawn* spawn) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_command();
  if (spawn) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      spawn = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, spawn, submessage_arena);
    }
    set_has_spawn();
    command_.spawn_ = spawn;
  }
  // @@protoc_insertion_point(field_set_allocated:Command.spawn)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Command::kEndTurnFieldNumber;
const int Command::kMoveFieldNumber;
const int Command::kSpawnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Command::Command()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2eproto::scc_info_Command.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Command)
}
Command::Command(const Command& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_command();
  switch (from.command_case()) {
    case kEndTurn: {
      mutable_end_turn()->::EndTurn::MergeFrom(from.end_turn());
      break;
    }
    case kMove: {
      mutable_move()->::Move::MergeFrom(from.move());
      break;
    }
    case kSpawn: {
      mutable_spawn()->::Spawn::MergeFrom(from.spawn());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Command)
}

void Command::SharedCtor() {
  clear_has_command();
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:Command)
  SharedDtor();
}

void Command::SharedDtor() {
  if (has_command()) {
    clear_command();
  }
}

void Command::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  ::protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Command& Command::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2eproto::scc_info_Command.base);
  return *internal_default_instance();
}


void Command::clear_command() {
// @@protoc_insertion_point(one_of_clear_start:Command)
  switch (command_case()) {
    case kEndTurn: {
      delete command_.end_turn_;
      break;
    }
    case kMove: {
      delete command_.move_;
      break;
    }
    case kSpawn: {
      delete command_.spawn_;
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMMAND_NOT_SET;
}


void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_command();
  _internal_metadata_.Clear();
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Command)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .EndTurn end_turn = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_end_turn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Move move = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_move()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Spawn spawn = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_spawn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Command)
  return false;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .EndTurn end_turn = 1;
  if (has_end_turn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_end_turn(), output);
  }

  // .Move move = 2;
  if (has_move()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_move(), output);
  }

  // .Spawn spawn = 3;
  if (has_spawn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_spawn(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Command)
}

::google::protobuf::uint8* Command::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .EndTurn end_turn = 1;
  if (has_end_turn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_end_turn(), deterministic, target);
  }

  // .Move move = 2;
  if (has_move()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_move(), deterministic, target);
  }

  // .Spawn spawn = 3;
  if (has_spawn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_spawn(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Command)
  return target;
}

size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (command_case()) {
    // .EndTurn end_turn = 1;
    case kEndTurn: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *command_.end_turn_);
      break;
    }
    // .Move move = 2;
    case kMove: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *command_.move_);
      break;
    }
    // .Spawn spawn = 3;
    case kSpawn: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *command_.spawn_);
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Command)
  GOOGLE_DCHECK_NE(&from, this);
  const Command* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Command>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Command)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Command)
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.command_case()) {
    case kEndTurn: {
      mutable_end_turn()->::EndTurn::MergeFrom(from.end_turn());
      break;
    }
    case kMove: {
      mutable_move()->::Move::MergeFrom(from.move());
      break;
    }
    case kSpawn: {
      mutable_spawn()->::Spawn::MergeFrom(from.spawn());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  return true;
}

void Command::Swap(Command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Command::InternalSwap(Command* other) {
  using std::swap;
  swap(command_, other->command_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EndTurn::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EndTurn::EndTurn()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2eproto::scc_info_EndTurn.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:EndTurn)
}
EndTurn::EndTurn(const EndTurn& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:EndTurn)
}

void EndTurn::SharedCtor() {
}

EndTurn::~EndTurn() {
  // @@protoc_insertion_point(destructor:EndTurn)
  SharedDtor();
}

void EndTurn::SharedDtor() {
}

void EndTurn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EndTurn::descriptor() {
  ::protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EndTurn& EndTurn::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2eproto::scc_info_EndTurn.base);
  return *internal_default_instance();
}


void EndTurn::Clear() {
// @@protoc_insertion_point(message_clear_start:EndTurn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool EndTurn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EndTurn)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:EndTurn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EndTurn)
  return false;
#undef DO_
}

void EndTurn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EndTurn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:EndTurn)
}

::google::protobuf::uint8* EndTurn::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:EndTurn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EndTurn)
  return target;
}

size_t EndTurn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EndTurn)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EndTurn::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EndTurn)
  GOOGLE_DCHECK_NE(&from, this);
  const EndTurn* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EndTurn>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EndTurn)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EndTurn)
    MergeFrom(*source);
  }
}

void EndTurn::MergeFrom(const EndTurn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EndTurn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EndTurn::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EndTurn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndTurn::CopyFrom(const EndTurn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EndTurn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndTurn::IsInitialized() const {
  return true;
}

void EndTurn::Swap(EndTurn* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EndTurn::InternalSwap(EndTurn* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EndTurn::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Move::InitAsDefaultInstance() {
  ::_Move_default_instance_._instance.get_mutable()->position_ = const_cast< ::Position*>(
      ::Position::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Move::kUnitIdFieldNumber;
const int Move::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Move::Move()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2eproto::scc_info_Move.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Move)
}
Move::Move(const Move& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::Position(*from.position_);
  } else {
    position_ = NULL;
  }
  unit_id_ = from.unit_id_;
  // @@protoc_insertion_point(copy_constructor:Move)
}

void Move::SharedCtor() {
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unit_id_) -
      reinterpret_cast<char*>(&position_)) + sizeof(unit_id_));
}

Move::~Move() {
  // @@protoc_insertion_point(destructor:Move)
  SharedDtor();
}

void Move::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void Move::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Move::descriptor() {
  ::protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Move& Move::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2eproto::scc_info_Move.base);
  return *internal_default_instance();
}


void Move::Clear() {
// @@protoc_insertion_point(message_clear_start:Move)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
  unit_id_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool Move::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Move)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 unit_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &unit_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Position position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Move)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Move)
  return false;
#undef DO_
}

void Move::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Move)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 unit_id = 1;
  if (this->unit_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->unit_id(), output);
  }

  // .Position position = 2;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_position(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Move)
}

::google::protobuf::uint8* Move::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Move)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 unit_id = 1;
  if (this->unit_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->unit_id(), target);
  }

  // .Position position = 2;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_position(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Move)
  return target;
}

size_t Move::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Move)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Position position = 2;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // uint64 unit_id = 1;
  if (this->unit_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->unit_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Move::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Move)
  GOOGLE_DCHECK_NE(&from, this);
  const Move* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Move>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Move)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Move)
    MergeFrom(*source);
  }
}

void Move::MergeFrom(const Move& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Move)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    mutable_position()->::Position::MergeFrom(from.position());
  }
  if (from.unit_id() != 0) {
    set_unit_id(from.unit_id());
  }
}

void Move::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Move)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Move::CopyFrom(const Move& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Move)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Move::IsInitialized() const {
  return true;
}

void Move::Swap(Move* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Move::InternalSwap(Move* other) {
  using std::swap;
  swap(position_, other->position_);
  swap(unit_id_, other->unit_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Move::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Spawn::InitAsDefaultInstance() {
  ::_Spawn_default_instance_._instance.get_mutable()->position_ = const_cast< ::Position*>(
      ::Position::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Spawn::kUnitIdFieldNumber;
const int Spawn::kUnitTypeFieldNumber;
const int Spawn::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Spawn::Spawn()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_protocol_2eproto::scc_info_Spawn.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Spawn)
}
Spawn::Spawn(const Spawn& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::Position(*from.position_);
  } else {
    position_ = NULL;
  }
  ::memcpy(&unit_id_, &from.unit_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&unit_type_) -
    reinterpret_cast<char*>(&unit_id_)) + sizeof(unit_type_));
  // @@protoc_insertion_point(copy_constructor:Spawn)
}

void Spawn::SharedCtor() {
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unit_type_) -
      reinterpret_cast<char*>(&position_)) + sizeof(unit_type_));
}

Spawn::~Spawn() {
  // @@protoc_insertion_point(destructor:Spawn)
  SharedDtor();
}

void Spawn::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void Spawn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Spawn::descriptor() {
  ::protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Spawn& Spawn::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_protocol_2eproto::scc_info_Spawn.base);
  return *internal_default_instance();
}


void Spawn::Clear() {
// @@protoc_insertion_point(message_clear_start:Spawn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
  ::memset(&unit_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unit_type_) -
      reinterpret_cast<char*>(&unit_id_)) + sizeof(unit_type_));
  _internal_metadata_.Clear();
}

bool Spawn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Spawn)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 unit_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &unit_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 unit_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unit_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Position position = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Spawn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Spawn)
  return false;
#undef DO_
}

void Spawn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Spawn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 unit_id = 1;
  if (this->unit_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->unit_id(), output);
  }

  // uint32 unit_type = 2;
  if (this->unit_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->unit_type(), output);
  }

  // .Position position = 3;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_position(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Spawn)
}

::google::protobuf::uint8* Spawn::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Spawn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 unit_id = 1;
  if (this->unit_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->unit_id(), target);
  }

  // uint32 unit_type = 2;
  if (this->unit_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->unit_type(), target);
  }

  // .Position position = 3;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_position(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Spawn)
  return target;
}

size_t Spawn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Spawn)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Position position = 3;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // uint64 unit_id = 1;
  if (this->unit_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->unit_id());
  }

  // uint32 unit_type = 2;
  if (this->unit_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->unit_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Spawn::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Spawn)
  GOOGLE_DCHECK_NE(&from, this);
  const Spawn* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Spawn>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Spawn)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Spawn)
    MergeFrom(*source);
  }
}

void Spawn::MergeFrom(const Spawn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Spawn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    mutable_position()->::Position::MergeFrom(from.position());
  }
  if (from.unit_id() != 0) {
    set_unit_id(from.unit_id());
  }
  if (from.unit_type() != 0) {
    set_unit_type(from.unit_type());
  }
}

void Spawn::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Spawn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Spawn::CopyFrom(const Spawn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Spawn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Spawn::IsInitialized() const {
  return true;
}

void Spawn::Swap(Spawn* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Spawn::InternalSwap(Spawn* other) {
  using std::swap;
  swap(position_, other->position_);
  swap(unit_id_, other->unit_id_);
  swap(unit_type_, other->unit_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Spawn::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameState_UnitsEntry_DoNotUse* Arena::CreateMaybeMessage< ::GameState_UnitsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::GameState_UnitsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GameState* Arena::CreateMaybeMessage< ::GameState >(Arena* arena) {
  return Arena::CreateInternal< ::GameState >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Position* Arena::CreateMaybeMessage< ::Position >(Arena* arena) {
  return Arena::CreateInternal< ::Position >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Tile* Arena::CreateMaybeMessage< ::Tile >(Arena* arena) {
  return Arena::CreateInternal< ::Tile >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Unit* Arena::CreateMaybeMessage< ::Unit >(Arena* arena) {
  return Arena::CreateInternal< ::Unit >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Command* Arena::CreateMaybeMessage< ::Command >(Arena* arena) {
  return Arena::CreateInternal< ::Command >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::EndTurn* Arena::CreateMaybeMessage< ::EndTurn >(Arena* arena) {
  return Arena::CreateInternal< ::EndTurn >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Move* Arena::CreateMaybeMessage< ::Move >(Arena* arena) {
  return Arena::CreateInternal< ::Move >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Spawn* Arena::CreateMaybeMessage< ::Spawn >(Arena* arena) {
  return Arena::CreateInternal< ::Spawn >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
