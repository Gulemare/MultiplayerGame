// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#ifndef PROTOBUF_INCLUDED_protocol_2eproto
#define PROTOBUF_INCLUDED_protocol_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_protocol_2eproto 

namespace protobuf_protocol_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_protocol_2eproto
class Actor;
class ActorDefaultTypeInternal;
extern ActorDefaultTypeInternal _Actor_default_instance_;
class Actor_Position;
class Actor_PositionDefaultTypeInternal;
extern Actor_PositionDefaultTypeInternal _Actor_Position_default_instance_;
class GameState;
class GameStateDefaultTypeInternal;
extern GameStateDefaultTypeInternal _GameState_default_instance_;
class MoveCommand;
class MoveCommandDefaultTypeInternal;
extern MoveCommandDefaultTypeInternal _MoveCommand_default_instance_;
class Player;
class PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
namespace google {
namespace protobuf {
template<> ::Actor* Arena::CreateMaybeMessage<::Actor>(Arena*);
template<> ::Actor_Position* Arena::CreateMaybeMessage<::Actor_Position>(Arena*);
template<> ::GameState* Arena::CreateMaybeMessage<::GameState>(Arena*);
template<> ::MoveCommand* Arena::CreateMaybeMessage<::MoveCommand>(Arena*);
template<> ::Player* Arena::CreateMaybeMessage<::Player>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class GameState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GameState) */ {
 public:
  GameState();
  virtual ~GameState();

  GameState(const GameState& from);

  inline GameState& operator=(const GameState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameState(GameState&& from) noexcept
    : GameState() {
    *this = ::std::move(from);
  }

  inline GameState& operator=(GameState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameState* internal_default_instance() {
    return reinterpret_cast<const GameState*>(
               &_GameState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(GameState* other);
  friend void swap(GameState& a, GameState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameState* New() const final {
    return CreateMaybeMessage<GameState>(NULL);
  }

  GameState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameState& from);
  void MergeFrom(const GameState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Player players = 1;
  int players_size() const;
  void clear_players();
  static const int kPlayersFieldNumber = 1;
  ::Player* mutable_players(int index);
  ::google::protobuf::RepeatedPtrField< ::Player >*
      mutable_players();
  const ::Player& players(int index) const;
  ::Player* add_players();
  const ::google::protobuf::RepeatedPtrField< ::Player >&
      players() const;

  // repeated .Actor actors = 2;
  int actors_size() const;
  void clear_actors();
  static const int kActorsFieldNumber = 2;
  ::Actor* mutable_actors(int index);
  ::google::protobuf::RepeatedPtrField< ::Actor >*
      mutable_actors();
  const ::Actor& actors(int index) const;
  ::Actor* add_actors();
  const ::google::protobuf::RepeatedPtrField< ::Actor >&
      actors() const;

  // @@protoc_insertion_point(class_scope:GameState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Player > players_;
  ::google::protobuf::RepeatedPtrField< ::Actor > actors_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Player : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Player) */ {
 public:
  Player();
  virtual ~Player();

  Player(const Player& from);

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(Player&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Player& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Player* other);
  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Player* New() const final {
    return CreateMaybeMessage<Player>(NULL);
  }

  Player* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Player& from);
  void MergeFrom(const Player& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Actor actor = 1;
  bool has_actor() const;
  void clear_actor();
  static const int kActorFieldNumber = 1;
  private:
  const ::Actor& _internal_actor() const;
  public:
  const ::Actor& actor() const;
  ::Actor* release_actor();
  ::Actor* mutable_actor();
  void set_allocated_actor(::Actor* actor);

  // uint64 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Player)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Actor* actor_;
  ::google::protobuf::uint64 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Actor_Position : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Actor.Position) */ {
 public:
  Actor_Position();
  virtual ~Actor_Position();

  Actor_Position(const Actor_Position& from);

  inline Actor_Position& operator=(const Actor_Position& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Actor_Position(Actor_Position&& from) noexcept
    : Actor_Position() {
    *this = ::std::move(from);
  }

  inline Actor_Position& operator=(Actor_Position&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Actor_Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Actor_Position* internal_default_instance() {
    return reinterpret_cast<const Actor_Position*>(
               &_Actor_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Actor_Position* other);
  friend void swap(Actor_Position& a, Actor_Position& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Actor_Position* New() const final {
    return CreateMaybeMessage<Actor_Position>(NULL);
  }

  Actor_Position* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Actor_Position>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Actor_Position& from);
  void MergeFrom(const Actor_Position& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Actor_Position* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // @@protoc_insertion_point(class_scope:Actor.Position)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Actor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Actor) */ {
 public:
  Actor();
  virtual ~Actor();

  Actor(const Actor& from);

  inline Actor& operator=(const Actor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Actor(Actor&& from) noexcept
    : Actor() {
    *this = ::std::move(from);
  }

  inline Actor& operator=(Actor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Actor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Actor* internal_default_instance() {
    return reinterpret_cast<const Actor*>(
               &_Actor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Actor* other);
  friend void swap(Actor& a, Actor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Actor* New() const final {
    return CreateMaybeMessage<Actor>(NULL);
  }

  Actor* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Actor>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Actor& from);
  void MergeFrom(const Actor& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Actor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Actor_Position Position;

  // accessors -------------------------------------------------------

  // .Actor.Position position = 3;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 3;
  private:
  const ::Actor_Position& _internal_position() const;
  public:
  const ::Actor_Position& position() const;
  ::Actor_Position* release_position();
  ::Actor_Position* mutable_position();
  void set_allocated_position(::Actor_Position* position);

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // uint32 type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // float angle = 4;
  void clear_angle();
  static const int kAngleFieldNumber = 4;
  float angle() const;
  void set_angle(float value);

  // @@protoc_insertion_point(class_scope:Actor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Actor_Position* position_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 type_;
  float angle_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MoveCommand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MoveCommand) */ {
 public:
  MoveCommand();
  virtual ~MoveCommand();

  MoveCommand(const MoveCommand& from);

  inline MoveCommand& operator=(const MoveCommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MoveCommand(MoveCommand&& from) noexcept
    : MoveCommand() {
    *this = ::std::move(from);
  }

  inline MoveCommand& operator=(MoveCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MoveCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveCommand* internal_default_instance() {
    return reinterpret_cast<const MoveCommand*>(
               &_MoveCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(MoveCommand* other);
  friend void swap(MoveCommand& a, MoveCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveCommand* New() const final {
    return CreateMaybeMessage<MoveCommand>(NULL);
  }

  MoveCommand* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MoveCommand>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MoveCommand& from);
  void MergeFrom(const MoveCommand& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Actor.Position target = 1;
  bool has_target() const;
  void clear_target();
  static const int kTargetFieldNumber = 1;
  private:
  const ::Actor_Position& _internal_target() const;
  public:
  const ::Actor_Position& target() const;
  ::Actor_Position* release_target();
  ::Actor_Position* mutable_target();
  void set_allocated_target(::Actor_Position* target);

  // @@protoc_insertion_point(class_scope:MoveCommand)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::Actor_Position* target_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameState

// repeated .Player players = 1;
inline int GameState::players_size() const {
  return players_.size();
}
inline void GameState::clear_players() {
  players_.Clear();
}
inline ::Player* GameState::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:GameState.players)
  return players_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Player >*
GameState::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:GameState.players)
  return &players_;
}
inline const ::Player& GameState::players(int index) const {
  // @@protoc_insertion_point(field_get:GameState.players)
  return players_.Get(index);
}
inline ::Player* GameState::add_players() {
  // @@protoc_insertion_point(field_add:GameState.players)
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Player >&
GameState::players() const {
  // @@protoc_insertion_point(field_list:GameState.players)
  return players_;
}

// repeated .Actor actors = 2;
inline int GameState::actors_size() const {
  return actors_.size();
}
inline void GameState::clear_actors() {
  actors_.Clear();
}
inline ::Actor* GameState::mutable_actors(int index) {
  // @@protoc_insertion_point(field_mutable:GameState.actors)
  return actors_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Actor >*
GameState::mutable_actors() {
  // @@protoc_insertion_point(field_mutable_list:GameState.actors)
  return &actors_;
}
inline const ::Actor& GameState::actors(int index) const {
  // @@protoc_insertion_point(field_get:GameState.actors)
  return actors_.Get(index);
}
inline ::Actor* GameState::add_actors() {
  // @@protoc_insertion_point(field_add:GameState.actors)
  return actors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Actor >&
GameState::actors() const {
  // @@protoc_insertion_point(field_list:GameState.actors)
  return actors_;
}

// -------------------------------------------------------------------

// Player

// .Actor actor = 1;
inline bool Player::has_actor() const {
  return this != internal_default_instance() && actor_ != NULL;
}
inline void Player::clear_actor() {
  if (GetArenaNoVirtual() == NULL && actor_ != NULL) {
    delete actor_;
  }
  actor_ = NULL;
}
inline const ::Actor& Player::_internal_actor() const {
  return *actor_;
}
inline const ::Actor& Player::actor() const {
  const ::Actor* p = actor_;
  // @@protoc_insertion_point(field_get:Player.actor)
  return p != NULL ? *p : *reinterpret_cast<const ::Actor*>(
      &::_Actor_default_instance_);
}
inline ::Actor* Player::release_actor() {
  // @@protoc_insertion_point(field_release:Player.actor)
  
  ::Actor* temp = actor_;
  actor_ = NULL;
  return temp;
}
inline ::Actor* Player::mutable_actor() {
  
  if (actor_ == NULL) {
    auto* p = CreateMaybeMessage<::Actor>(GetArenaNoVirtual());
    actor_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Player.actor)
  return actor_;
}
inline void Player::set_allocated_actor(::Actor* actor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete actor_;
  }
  if (actor) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      actor = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, actor, submessage_arena);
    }
    
  } else {
    
  }
  actor_ = actor;
  // @@protoc_insertion_point(field_set_allocated:Player.actor)
}

// uint64 id = 2;
inline void Player::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Player::id() const {
  // @@protoc_insertion_point(field_get:Player.id)
  return id_;
}
inline void Player::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Player.id)
}

// -------------------------------------------------------------------

// Actor_Position

// float x = 1;
inline void Actor_Position::clear_x() {
  x_ = 0;
}
inline float Actor_Position::x() const {
  // @@protoc_insertion_point(field_get:Actor.Position.x)
  return x_;
}
inline void Actor_Position::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:Actor.Position.x)
}

// float y = 2;
inline void Actor_Position::clear_y() {
  y_ = 0;
}
inline float Actor_Position::y() const {
  // @@protoc_insertion_point(field_get:Actor.Position.y)
  return y_;
}
inline void Actor_Position::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:Actor.Position.y)
}

// -------------------------------------------------------------------

// Actor

// uint64 id = 1;
inline void Actor::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Actor::id() const {
  // @@protoc_insertion_point(field_get:Actor.id)
  return id_;
}
inline void Actor::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Actor.id)
}

// uint32 type = 2;
inline void Actor::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 Actor::type() const {
  // @@protoc_insertion_point(field_get:Actor.type)
  return type_;
}
inline void Actor::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Actor.type)
}

// .Actor.Position position = 3;
inline bool Actor::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline void Actor::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
}
inline const ::Actor_Position& Actor::_internal_position() const {
  return *position_;
}
inline const ::Actor_Position& Actor::position() const {
  const ::Actor_Position* p = position_;
  // @@protoc_insertion_point(field_get:Actor.position)
  return p != NULL ? *p : *reinterpret_cast<const ::Actor_Position*>(
      &::_Actor_Position_default_instance_);
}
inline ::Actor_Position* Actor::release_position() {
  // @@protoc_insertion_point(field_release:Actor.position)
  
  ::Actor_Position* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::Actor_Position* Actor::mutable_position() {
  
  if (position_ == NULL) {
    auto* p = CreateMaybeMessage<::Actor_Position>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Actor.position)
  return position_;
}
inline void Actor::set_allocated_position(::Actor_Position* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete position_;
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Actor.position)
}

// float angle = 4;
inline void Actor::clear_angle() {
  angle_ = 0;
}
inline float Actor::angle() const {
  // @@protoc_insertion_point(field_get:Actor.angle)
  return angle_;
}
inline void Actor::set_angle(float value) {
  
  angle_ = value;
  // @@protoc_insertion_point(field_set:Actor.angle)
}

// -------------------------------------------------------------------

// MoveCommand

// .Actor.Position target = 1;
inline bool MoveCommand::has_target() const {
  return this != internal_default_instance() && target_ != NULL;
}
inline void MoveCommand::clear_target() {
  if (GetArenaNoVirtual() == NULL && target_ != NULL) {
    delete target_;
  }
  target_ = NULL;
}
inline const ::Actor_Position& MoveCommand::_internal_target() const {
  return *target_;
}
inline const ::Actor_Position& MoveCommand::target() const {
  const ::Actor_Position* p = target_;
  // @@protoc_insertion_point(field_get:MoveCommand.target)
  return p != NULL ? *p : *reinterpret_cast<const ::Actor_Position*>(
      &::_Actor_Position_default_instance_);
}
inline ::Actor_Position* MoveCommand::release_target() {
  // @@protoc_insertion_point(field_release:MoveCommand.target)
  
  ::Actor_Position* temp = target_;
  target_ = NULL;
  return temp;
}
inline ::Actor_Position* MoveCommand::mutable_target() {
  
  if (target_ == NULL) {
    auto* p = CreateMaybeMessage<::Actor_Position>(GetArenaNoVirtual());
    target_ = p;
  }
  // @@protoc_insertion_point(field_mutable:MoveCommand.target)
  return target_;
}
inline void MoveCommand::set_allocated_target(::Actor_Position* target) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete target_;
  }
  if (target) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      target = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    
  } else {
    
  }
  target_ = target;
  // @@protoc_insertion_point(field_set_allocated:MoveCommand.target)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_protocol_2eproto
